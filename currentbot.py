import tensorflow as tf
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
from PIL import Image
import numpy as np
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)
# MobileNetV2
model = tf.keras.applications.MobileNetV2(weights="imagenet")


async def classify_image(image_path):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é MobileNetV2"""
    img = Image.open(image_path).resize((224, 224))
    img_array = np.array(img)
    img_array = tf.keras.applications.mobilenet_v2.preprocess_input(img_array[np.newaxis, ...])
    predictions = model.predict(img_array)
    return tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=5)[0]

TOKEN = "7268432350:AAHsKSTvVRN8ZbQTKMuS9yj30iS1JAZ_g4w"

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="new_analysis")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ", callback_data="examples")],
        [InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫", callback_data="feedback_button")]
    ])


def get_examples_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ñ–∏–≤–æ—Ç–Ω—ã–µ", callback_data="example_–∂–∏–≤–æ—Ç–Ω—ã–µ")],
        [InlineKeyboardButton("–ï–¥–∞", callback_data="example_–µ–¥–∞")],
        [InlineKeyboardButton("–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="example_–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])


# ===== –ö–û–ú–ê–ù–î–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Image Classification Bot!* üåü

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —á—Ç–æ –Ω–∞ –Ω—ë–º —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ MobileNetV2.

üîπ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å:
- –ß—ë—Ç–∫–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
- –û–¥–∏–Ω–æ—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
- –•–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º

‚ú® *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*
"""
    await update.message.reply_text(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

üîç *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
2. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
3. –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

üìä *–¢–æ—á–Ω–æ—Å—Ç—å:*
- ~80-95% –¥–ª—è —á—ë—Ç–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- ~60-75% –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω

‚öôÔ∏è *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
- –ù–µ–π—Ä–æ—Å–µ—Ç—å MobileNetV2
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ImageNet (1000+ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)

üìå *–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/feedback - –û—Å—Ç–∞–≤—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤–∑—è—å
"""
    await update.message.reply_text(
        help_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )


# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    image_path = "temp_image.jpg"
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        await photo_file.download_to_drive(image_path)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        await update.message.reply_photo(
            photo=update.message.photo[-1].file_id,
            caption="üîÑ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*",
            parse_mode="Markdown"
        )

        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
        predictions = await classify_image(image_path)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*\n"
        response += "_(–ø–æ –≤–µ—Ä—Å–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ MobileNetV2)_\n\n"

        medals = ["ü•á", "ü•à", "ü•â"]

        for i, (_, label, prob) in enumerate(predictions[:3]):
            confidence = prob * 100
            response += f"{medals[i]} *{label}* ‚Äî {confidence:.1f}%\n"

        response += "\nüìå _–ß–µ–º –≤—ã—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏_"

        await update.message.reply_text(
            response,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"Error processing image: {e}")
        await update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
    finally:
        if os.path.exists(image_path):
            os.remove(image_path)


# ===== CALLBACK-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "new_analysis":
        await query.edit_message_text(
            "üîÑ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
            parse_mode="Markdown"
        )
    elif query.data == "feedback_button":
        await query.edit_message_text(
            "‚úçÔ∏è *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∏ –º—ã —É—á—Ç—ë–º —ç—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!\n\n"
            "–§–æ—Ä–º–∞—Ç: /feedback [–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç]",
            parse_mode="Markdown"
        )
    elif query.data == "examples":
        await query.edit_message_text(
            "üì∏ *–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã:",
            parse_mode="Markdown",
            reply_markup=get_examples_keyboard()
        )
    elif query.data.startswith("example_"):
        category = query.data.replace("example_", "")
        examples = {
            "–∂–∏–≤–æ—Ç–Ω—ã–µ": ["üê∂ –°–æ–±–∞–∫–∞", "üê± –ö–æ—à–∫–∞", "ü¶ú –ü—Ç–∏—Ü–∞"],
            "–µ–¥–∞": ["üçé –Ø–±–ª–æ–∫–æ", "üçï –ü–∏—Ü—Ü–∞", "üç∞ –¢–æ—Ä—Ç"],
            "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": ["üóΩ –°—Ç–∞—Ç—É—è –°–≤–æ–±–æ–¥—ã", "üóº –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è", "üèõ –ö–æ–ª–∏–∑–µ–π"]
        }

        await query.edit_message_text(
            f"üñº *–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:*\n\n"
            f"{chr(10).join(examples.get(category, []))}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!",
            parse_mode="Markdown",
            reply_markup=get_examples_keyboard()
        )
    elif query.data == "back":
        await query.edit_message_text(
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )

# ===== –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ =====
async def feedback_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback"""
    user_feedback = ' '.join(context.args)
    if user_feedback:
        logger.info(f"Feedback from {update.effective_user.id}: {user_feedback}")
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n\n"
            "`/feedback –≠—Ç–æ –±—ã–ª–∞ –∫–æ—à–∫–∞, –∞ –Ω–µ —Å–æ–±–∞–∫–∞.`",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê =====
async def post_init(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    await application.bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
        BotCommand("feedback", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    ])


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("feedback", feedback_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
